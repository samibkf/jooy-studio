
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bohxienpthilrfwktokd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJvaHhpZW5wdGhpbHJmd2t0b2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU2OTc3OTcsImV4cCI6MjA2MTI3Mzc5N30.4UO_pFmDauRz6Km5wTr3VHM95_GwyWKc1-pxGO1mImg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize storage buckets
export const initializeStorage = async () => {
  try {
    console.log('Starting storage initialization check');
    
    // First check if we can access the storage service at all
    try {
      const { data, error } = await supabase.storage.getBucket('pdfs');
      
      if (!error && data) {
        console.log('pdfs bucket exists and is accessible');
        return true;
      }
      
      if (error && error.message !== 'The resource was not found') {
        console.error('Error checking bucket existence:', error);
        return false;
      }
      
      console.log('pdfs bucket does not exist, attempting to create it');
    } catch (accessError) {
      console.error('Initial storage access check failed:', accessError);
      return false;
    }
    
    // Try to create the bucket
    try {
      const { data, error } = await supabase.storage.createBucket('pdfs', {
        public: true,
        fileSizeLimit: 10485760, // 10MB
        allowedMimeTypes: ['application/pdf']
      });
      
      if (error) {
        console.error('Failed to create pdfs bucket with options:', error);
        
        // Try a simplified approach without options
        const { error: simpleError } = await supabase.storage.createBucket('pdfs');
        
        if (simpleError) {
          console.error('Also failed to create simple bucket:', simpleError);
          return false;
        }
      }
      
      console.log('pdfs bucket created successfully');
      
      // Try to update the bucket to be public
      try {
        const { error: updateError } = await supabase.storage.updateBucket('pdfs', {
          public: true
        });
        
        if (updateError) {
          console.error('Error making bucket public:', updateError);
          // Continue anyway, as the bucket may still work
        } else {
          console.log('Storage bucket set to public successfully');
        }
      } catch (policyError) {
        console.log('Policy update failed:', policyError);
        // Continue anyway, as the bucket may still work
      }
      
      return true;
    } catch (createError) {
      console.error('Error creating bucket:', createError);
      return false;
    }
  } catch (error) {
    console.error('Error initializing storage:', error);
    return false;
  }
};
