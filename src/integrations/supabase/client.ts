
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bohxienpthilrfwktokd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJvaHhpZW5wdGhpbHJmd2t0b2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU2OTc3OTcsImV4cCI6MjA2MTI3Mzc5N30.4UO_pFmDauRz6Km5wTr3VHM95_GwyWKc1-pxGO1mImg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize storage buckets
export const initializeStorage = async () => {
  try {
    // Check if the pdfs bucket exists
    const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
    
    if (bucketError) {
      console.error('Error listing buckets:', bucketError);
      return false;
    }
    
    const pdfsBucketExists = buckets?.some(bucket => bucket.name === 'pdfs');
    
    if (!pdfsBucketExists) {
      console.log('Creating pdfs bucket...');
      const { error: createError } = await supabase.storage.createBucket('pdfs', {
        public: true,
        fileSizeLimit: 10485760, // 10MB
      });
      
      if (createError) {
        console.error('Error creating pdfs bucket:', createError);
        return false;
      }
      
      // Set up bucket policies
      const { error: policyError } = await supabase.storage.from('pdfs').createSignedUploadUrl('test.pdf');
      if (policyError && policyError.message !== 'The resource was not found') {
        console.error('Error setting up bucket policies:', policyError);
      }
      
      console.log('pdfs bucket created successfully');
    } else {
      console.log('pdfs bucket already exists');
    }
    
    return true;
  } catch (error) {
    console.error('Error initializing storage:', error);
    return false;
  }
};
